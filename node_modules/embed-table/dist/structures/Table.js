"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const Row_js_1 = require("./Row.js");
class Table {
    /**
     * Create a new Table
     * @param {TableData} data
     */
    constructor({ columnIndexes: columnIndexes, titleIndexes, titles, end = '', padEnd = 0, start = '', whiteSpace = false }) {
        this.titleString = '';
        this.titles = titles;
        this.titleIndexes = titleIndexes;
        this.rows = [];
        this.columnIndexes = columnIndexes;
        this.start = start;
        this.end = end;
        this.padEnd = padEnd;
        this.whiteSpace = whiteSpace;
        if (this.titles.length !== this.titleIndexes.length)
            throw new RangeError('The \'titles\' and \'titleIndex\' array must be of the same length.');
        for (let i = 0; i < this.titles.length; i++)
            this.titleString += this.padTitle(i);
    }
    /**
     * Add a row with data to the Table
     * @param {string[]} columns
     * @param {RowOptionData} options
     * @returns {this}
     */
    addRow(columns, options) {
        this.rows.push(this.start + new Row_js_1.Row({
            columns,
            indexes: this.columnIndexes,
            whiteSpace: this.whiteSpace
        })
            .toString()
            .padEnd(this.columnIndexes[this.columnIndexes.length - 1] + (options?.override ?? 0 + this.padEnd), ' ') + this.end);
        return this;
    }
    /**
     * Convert the Table to an EmbedField object
     * @param {boolean} [inline = false] Whether or not the field is inline
     * @returns {EmbedField} Use this when creating a MessageEmbed
     */
    field(inline = false) {
        const field = {
            name: this.titleString,
            value: this.rows.join('\n'),
            inline: inline
        };
        this.clear();
        return field;
    }
    /**
     * Clear the rows out of the Table
     * @returns {void}
     */
    clear() {
        this.rows.length = 0;
    }
    /**
     * Adds the spacing to the titles in the title string
     * @param {number} i
     * @returns {string} The padded title
     */
    padTitle(i) {
        if (!this.checkTitles()) {
            throw new RangeError('Length of a \'title\' cannot be longer than the starting index of the next title. Try increasing the value of the subsequent \'titleIndex\'.');
        }
        return ' '.repeat(this.titleIndexes[i] - (this.titleIndexes[i - 1] ?? 0) - (this.titles[i - 1]?.length ?? 0)) + this.titles[i].slice(0, (this.titleIndexes[i + 1] ?? Infinity) - this.titleIndexes[i] - 1);
    }
    checkTitles() {
        for (let i = 0; i < this.titles.length - 1; i++) {
            if (this.titles[i].length > this.titleIndexes[i + 1])
                return false;
        }
        return true;
    }
}
exports.Table = Table;
//# sourceMappingURL=Table.js.map